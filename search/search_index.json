{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is project contains several samples for mappMotion.</p> <p></p> <p>The samples are broken up in branches to focus on a single function at a time. The main branch has a base example with some basic motion functions. This main sample is then expanded to the specific function. The description for each function has a link to the branch used.</p>"},{"location":"index.html#download","title":"Download","text":"<p>To download a specific sample follow these steps:</p> <p></p> <p>This sample can run in simulation mode (http://127.0.0.1:81/).</p>"},{"location":"index.html#help","title":"Help","text":"<p>Many sample have Automation Studio help file references. To jump to this references copy and paste the code into help like this:</p> <p></p>"},{"location":"index.html#requirements","title":"Requirements","text":"<ul> <li>Automation Studio 4.12</li> <li>mappView 5.22</li> <li>mappServices 5.22</li> </ul>"},{"location":"revision.html","title":"Revision","text":""},{"location":"revision.html#23102023","title":"23.10.2023","text":"<ul> <li>par_id version 7</li> </ul>"},{"location":"revision.html#23102023_1","title":"23.10.2023","text":"<ul> <li>par_id version 6</li> </ul>"},{"location":"revision.html#12092023","title":"12.09.2023","text":"<ul> <li>motor_cfg version 6</li> </ul>"},{"location":"revision.html#29082023","title":"29.08.2023","text":"<ul> <li>motor_cfg version 5</li> </ul>"},{"location":"revision.html#23062023","title":"23.06.2023","text":"<ul> <li>par_id version 5</li> </ul>"},{"location":"revision.html#07062023","title":"07.06.2023","text":"<ul> <li>drive_cfg version 2</li> <li>axis_cfg version 3</li> <li>motor_cfg version 4</li> <li>par_id version 4</li> </ul>"},{"location":"revision.html#02062023","title":"02.06.2023","text":"<ul> <li>drive_cfg version 1</li> <li>axis_cfg version 2</li> <li>motor_cfg version 3</li> <li>par_id version 3</li> <li>brake version 3</li> </ul>"},{"location":"revision.html#26052023","title":"26.05.2023","text":"<ul> <li>axis_cfg version 1</li> <li>motor_cfg version 2</li> <li>par_id version 2</li> <li>brake version 2</li> </ul>"},{"location":"revision.html#20052023","title":"20.05.2023","text":"<p>First public release</p>"},{"location":"structure.html","title":"Structure","text":"<p>All functions are collected in the axis proto type package. The proto type package consists only of the one axis function that is demonstrated. If multiple functions are used in one project the additional proto type packages can be copied and pasted into the existing proto type package.</p> <p>Each axis function is build in way that it can be used independently from other functions. Each axis function comes with its own variable and type definitions. All code is in structure text language and encapsulated in an action. </p>"},{"location":"structure.html#adding-a-function-to-a-task","title":"Adding a function to a task","text":"<p>To add a function to a specific task follow this procedure.</p>              The folder AxisProto contains all files necessary for the specific function. In the first project you can copy the entire AxisProto folder from the sample project into your project. For additional functions just copy the folder for new axis function (Brake) into the existing AxisProto folder.  It is recommended to reference the files from the AxisProto type folder to your task instead of making copy. A reference makes it easier to update the files in the future.                                  All axis functions communicate to the outside world through a structure. Most functions need some initial parameters, for example the axis reference MpLink. This code can be executed in the _INIT of the task.              The action that drives the function is then called in the _CYLCIC part of the task."},{"location":"structure.html#coding-guidelines","title":"Coding guidelines","text":"<p>Here are some general coding guidelines used to develop the samples.</p> <ul> <li>All axis functions come with its own type and variable declaration and code file.</li> <li>All variables that are not relevant for the outside world are added to an internal structure [FunctionName]Internal.</li> <li>There is no dependency to any other module.</li> <li>All data exchange is done through one structure.</li> </ul> <p>The structure for the data exchange follows the following guidelines</p>          Description               Notation                   A command that triggers an action                       Cmd{Get|Set}{What}             Example: CmdSetMotor                       mappMotion axis reference                       MpLink                       Parameter or configuration values. Parameters can be two directional but it is recommended to see parameters as write only.                       Par{What}             Example: ParMotorSynchronous                       Status values are read only and are only changed by the prototype code.                       Sta{What}             Example: StaMotorSynchronous                       Error code                       ErrID"},{"location":"template.html","title":"Template","text":"<p>The brake sample provides an easy interface to control the brake parameters and function. Also see Automation Studio help (00ef9572-f1d5-43b5-9815-90e510eaeb7f)</p>"},{"location":"template.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"template.html#command-structure","title":"Command structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Command Function CmdClose Close brake"},{"location":"template.html#programm-structure","title":"programm structure","text":""},{"location":"template.html#revision","title":"Revision","text":"<p>Version 1 - First release</p>"},{"location":"axis_cfg/axis_cfg.html","title":"Axis Configuration","text":"<p>The axis configuration sample provides an example how to change a axis configuration during runtime. After changing the axis parameters the PLC must be reboot for the changes to take affect. The function block MC_BR_ProcessConfig used in this example does not check parameter values for correctness. It is therefore necessary to check the axis for errors after writing new parameters through the PLC logger or the function block MC_ReadAxisError.</p> <p>Also see </p> <ul> <li>Automation Studio help for a description of MC_BR_ProcessConfig (9c2eadae-8494-4e9a-b305-0afa2dabf1d4)</li> <li>Automation Studio help for a description of the axis parameter (18353d93-e907-436f-90d9-d2a80bd7f7ac)</li> </ul>"},{"location":"axis_cfg/axis_cfg.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"axis_cfg/axis_cfg.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Command Function CmdSetAxis Set the new axis parameters CmdGetAxis Get the active axis parameters CmdReboot Reboot PLC MpLink The axis reference establishes the connection between the function block and an axis ParAxis Axis parameters for set command StaAxis Axis parameters get command ErrId Error ID"},{"location":"axis_cfg/axis_cfg.html#program-structure","title":"Program structure","text":"The axis parameter can be outsourced into an extra file with just the axis parameters. This has the advantage that the axis configuration can be changed easily without changing any source code in the proto type.          <p>The program consists of a state machine to execute the commands. The B&amp;R function block that changed the axis configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_AXIS_CFG_PRE_SET. From this step the state machine goes to the read or write state. The axis parameter can be provided as a separate file or action (see example). It is also possible to set the parameters directly in the structure ParAxis.</p> <p>After changing the axis parameters the PLC must be reboot for the changes to take affect.</p>"},{"location":"axis_cfg/axis_cfg.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"axis_cfg/axis_cfg.html#program-init","title":"Program init","text":"<pre><code>PROGRAM _INIT\n    // --------------------------------------------------------------------------\n    // Axis configuration\n    AxisCfg.MpLink := ADR(gAxis_1);         // MpLink for axis\n    AxisConfigSample;                       // Axis sample configuration\n\nEND_PROGRAM\n</code></pre>"},{"location":"axis_cfg/axis_cfg.html#program-cyclic","title":"Program cyclic","text":"<pre><code>PROGRAM _CYCLIC\n    // --------------------------------------------------------------------------\n    // Call axis actions used for this drive\n    AxisCfgAction;      // Call axis configuration code\n\nEND_PROGRAM\n</code></pre>"},{"location":"axis_cfg/axis_cfg.html#revision","title":"Revision","text":"<p>Version 3</p> <ul> <li>Removed dependency from common</li> <li>New internal structure</li> </ul> <p>Version 2</p> <ul> <li>Renamed function block </li> <li>Don't read before write</li> <li>Minor tweaks</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"brake/brake.html","title":"Brake","text":"<p>The brake sample provides an easy interface to control the brake parameters and function. </p> <p>Also see Automation Studio help </p> <ul> <li>(00ef9572-f1d5-43b5-9815-90e510eaeb7f) for a description of MC_BR_BrakeTest_AcpAx</li> </ul>"},{"location":"brake/brake.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"brake/brake.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Parameter Function CmdClose Close brake CmdOpen Open brake CmdSetPar Set brake parameter MpLink The axis reference establishes the connection between the function block and an axis ParBrake Configuration parameters StaBrake Configuration parameters ErrId Error ID"},{"location":"brake/brake.html#program-structure","title":"Program structure","text":"<p>The program consists of a state machine where the commands are executed. When a brake open or close command is executed the status of the brake is checked in an additional step.</p>"},{"location":"brake/brake.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"brake/brake.html#program-init","title":"Program init","text":"<pre><code>PROGRAM _INIT\n    // --------------------------------------------------------------------------\n    // Set brake parameters, disable brake restrictions\n    AxisBrake.MpLink := ADR(gAxis_1);                           // MpLink reference for axis                    \n    AxisBrake.ParBrake.RestrictedBrakeControl := mcSWITCH_OFF;  // Allow brake to be turned off\n    AxisBrake.CmdSetPar := TRUE;                                // Call parameter set command\n\nEND_PROGRAM\n</code></pre>"},{"location":"brake/brake.html#program-cyclic","title":"Program cyclic","text":"<pre><code>PROGRAM _CYCLIC\n    // --------------------------------------------------------------------------\n    // Call axis actions used for this drive\n    BrakeAction;\n\nEND_PROGRAM\n</code></pre>"},{"location":"brake/brake.html#revision","title":"Revision","text":"<p>Version 3</p> <ul> <li>Renamed action</li> </ul> <p>Version 2</p> <ul> <li>Renamed action</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"drive_cfg/drive_cfg.html","title":"Drive Configuration","text":"<p>The drive configuration sample provides an example how to change the drive parameters during runtime. A lot of times only a small portion of parameters needs to be changed out of the structure. Since the complete structure is written every time it is recommended to read the structure first, then copy the data to the parameter structure, change the parameters and then write the changes back to the drive. After changing the drive parameters the PLC must be reboot for the changes to take affect. The function block MC_BR_ProcessConfig used in this example does not check parameter values for correctness. It is therefore necessary to check the axis for errors after writing new parameters through the PLC logger or the function block MC_ReadAxisError.</p> <p>Also see </p> <ul> <li>Automation Studio help for a description of MC_BR_ProcessConfig (9c2eadae-8494-4e9a-b305-0afa2dabf1d4)</li> <li>Automation Studio help for changing ACOPOS settings at runtime (5b68d099-f8aa-45de-9c86-e8e8f3907850)</li> </ul>"},{"location":"drive_cfg/drive_cfg.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"drive_cfg/drive_cfg.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Parameter Function CmdSetDrive Set the new drive parameters CmdGetDrive Get the active drive parameters CmdReboot Reboot PLC MpLink The axis reference establishes the connection between the function block and an axis ParDrive Parameters for the set command StaDrive Parameters for the get command ErrId Error ID"},{"location":"drive_cfg/drive_cfg.html#error-handling","title":"Error handling","text":"<p>The sample generates the following list of error messages. All other error numbers are generated from included libraries that can be found in the Automation Studio help.</p> No Constant Text 10000 ERR_AXISDRIVECFG_LOC_EMPTY Axis location is empty 10001 ERR_AXISDRIVECFG_LOC_INVALID Axis location is invalid 10002 ERR_AXISDRIVECFG_AX_FEATURE Axis feature configuration is invalid"},{"location":"drive_cfg/drive_cfg.html#program-structure","title":"Program structure","text":"The drive parameter can be outsourced into an extra file with just the drive parameters. This has the advantage that the drive configuration can be changed easily without changing any source code in the proto type.          <p>The program consists of a state machine to execute the commands. The B&amp;R function block that changed the motor configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_DRIVE_CFG_PRE_SET. From this step the state machine goes to the read or write state. The drive parameter can be provided as a separate file and action (see example). It is also possible to set the parameters directly in the structure ParDrive.</p> <p>After changing the drive parameters the PLC must be reboot for the changes to take affect.</p>"},{"location":"drive_cfg/drive_cfg.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"drive_cfg/drive_cfg.html#program-init","title":"Program init","text":"<pre><code>PROGRAM _INIT\n    // --------------------------------------------------------------------------\n    // Drive configuration\n    AxisDriveCfg.MpLink := ADR(gAxis_1);            // MpLink for axis\n\nEND_PROGRAM\n</code></pre>"},{"location":"drive_cfg/drive_cfg.html#program-cyclic","title":"Program cyclic","text":"<pre><code>    // --------------------------------------------------------------------------\n    // When drive configuration command was triggered\n    // - Read configuration first to get all actual values\n    // - Copy the actual values into the parameter structure to get a template\n    // - Overwrite the parameters that need to be changed\n    // - Trigger drive configuration write command\n    // - Reset local write command when done\n    IF EDGEPOS(cmdChangeDriveConfig) THEN\n        AxisDriveCfg.CmdGetDrive := TRUE;\n    END_IF\n    IF EDGENEG(AxisDriveCfg.CmdGetDrive) THEN\n        IF cmdChangeDriveConfig THEN\n            brsmemcpy(ADR(AxisDriveCfg.ParDrive), ADR(AxisDriveCfg.StaDrive), SIZEOF(AxisDriveCfg.ParDrive));\n            AxisConfigSample;                   // Drive sample configuration\n            AxisDriveCfg.CmdSetDrive := TRUE;   // Set changed parameters\n        END_IF\n    END_IF\n    IF EDGENEG(AxisDriveCfg.CmdSetDrive) THEN\n        cmdChangeDriveConfig := FALSE;          // Reset local command\n    END_IF\n    AxisDriveCfgAction;                         // Call drive configuration action used for this drive\n</code></pre>"},{"location":"drive_cfg/drive_cfg.html#revision","title":"Revision","text":"<p>Version 3</p> <ul> <li>Update mappMotion to 5.24</li> <li>Removed obsolete hardware</li> <li>Added axis feature pointer auto correction</li> </ul> <p>Version 2</p> <ul> <li>Removed dependency from common</li> <li>New internal structure</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"motor_cfg/motor_cfg.html","title":"Motor Configuration","text":"<p>The motor configuration sample provides an example how to change a motor during runtime. If there is no preferred motor during development or the motor parameters are unknown the motor type \"MotorSynchronous_any\" or \"MotorInduction_any\" can be used in the hardware tree. After changing the motor parameters the PLC must be reboot for the changes to take affect. The function block MC_BR_ProcessConfig used in this example does not check parameter values for correctness. It is therefore necessary to check the axis for errors after writing new parameters through the PLC logger or the function block MC_ReadAxisError.</p> <p>Also see </p> <ul> <li>Automation Studio help for a description of MC_BR_ProcessConfig (9c2eadae-8494-4e9a-b305-0afa2dabf1d4)</li> <li>Automation Studio help for a description of the motor parameters (ce78daa2-e6a6-448c-af72-7b19a7f7ef82)</li> <li>Conversion list of synchronous motor parameters</li> <li>Conversion list of induction motor parameters</li> </ul>"},{"location":"motor_cfg/motor_cfg.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"motor_cfg/motor_cfg.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Parameter Function CmdSetMotor Set the new motor parameters CmdGetMotor Get the active motor parameters CmdReboot Reboot PLC MpLink The axis reference establishes the connection between the function block and an axis ParMotorType There are two types of possible motor configuration. Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors ParMotorSynchronous Parameters for synchronous motor for set command StaMotorSynchronous Parameters for synchronous motor for get command ParMotorInduction Parameters for induction motor for set command StaMotorInduction Parameters for induction motor for get command StaCompareResult Shows if parameters in Sta... and Par... are identical ErrId Error ID"},{"location":"motor_cfg/motor_cfg.html#program-structure","title":"Program structure","text":"The motor parameter can be outsourced into an extra file with just the motor parameters. This has the advantage that new motors can be added easily without changing any source code in the proto type.          <p>The program consists of a state machine to execute the commands. The B&amp;R function block that changed the motor configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_MOTOR_CFG_PRE_SET. From this step the state machine goes to the read or write state. The motor parameter can be provided as a separate file and action (see example). It is also possible to set the parameters directly in the structure ParMotorSynchronous or StaMotorInduction.</p> <p>After changing the motor parameters the PLC must be reboot for the changes to take affect.</p>"},{"location":"motor_cfg/motor_cfg.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"motor_cfg/motor_cfg.html#program-init","title":"Program init","text":"<pre><code>PROGRAM _INIT\n    // --------------------------------------------------------------------------\n    // Motor configuration\n    AxisMotorCfg.MpLink := ADR(gAxis_1);                        // MpLink for axis\n    AxisMotorCfg.ParMotorType := AX_MOTOR_TYPE_SYNCHRONOUS;     // Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors\n    Motor_8LVB13_B1030F300_00;                                  // This action contains the new motor parameters (see additional file with the same name)\n\nEND_PROGRAM\n</code></pre>"},{"location":"motor_cfg/motor_cfg.html#program-cyclic","title":"Program cyclic","text":"<pre><code>PROGRAM _CYCLIC\n    // --------------------------------------------------------------------------\n    // Call axis actions used for this drive\n    AxisCommonAction;\n    MotorCfgAction; // Call motor configuration code\n\nEND_PROGRAM\n</code></pre>"},{"location":"motor_cfg/motor_cfg.html#revision","title":"Revision","text":"<p>Version 6 - Update to mapp 5.23</p> <p>Version 5</p> <ul> <li>New flag StaCompareResult shows if parameters in Sta... and Par... are identical</li> </ul> <p>Version 4</p> <ul> <li>Removed dependency from common</li> <li>New internal structure</li> </ul> <p>Version 3</p> <ul> <li>Renamed function block </li> <li>Don't read before write</li> <li>Minor tweaks</li> </ul> <p>Version 2</p> <ul> <li>Renamed action</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"par_id/par_id.html","title":"Par ID","text":"<p>The par ID sample provides a simplified interface to control the ACOPOS parameter IDs. Parameter IDs can be read or written once or cyclic. In addition there is a cyclic multiplexed mode where data is accessed continuously but not every cycle. The data type is derived from variable data type. Make sure that the variable data type matches the parameter ID data type. If the variable is none standard type (ex. array or structure) then the data type mcACPAX_PARTYPE_VOID is used.</p> <p></p> <p>Also see Automation Studio help </p> <ul> <li>(64f032b8-d12d-4fdf-a118-179256305dcf) for a complete list of parameter IDs.</li> <li>(89221e8a-e9dd-427b-a12b-2b75d6f5fe83) for a description of MC_BR_ProcessParID_AcpAx</li> <li>(b504b417-f0ed-4e98-914a-73b105a3931b) for a description of MC_BR_GetCyclicDataInfo_AcpAx</li> </ul>"},{"location":"par_id/par_id.html#repo-link","title":"Repo Link","text":"<p>Here is the link to the repository.</p>"},{"location":"par_id/par_id.html#configuration","title":"Configuration","text":"<p>The sample can be configured through the following constants located in the VAR-file of the package.</p> Parameter Function Default AxisParNum Total number of parameter IDs 10"},{"location":"par_id/par_id.html#interface-structure","title":"Interface structure","text":"<p>The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows:</p> Parameter Function CmdUpdate Update par id configuration. MpLink The axis reference establishes the connection between the function block and an axis. ParIds Array of parameters ID configurations. See details below. MaxReadDataBytes Maximum number of cyclic bytes used in read direction MaxWriteDataBytes Maximum number of cyclic bytes used in read direction ErrId Shows the first error that occurred in a parameter configuration. Data access will continue for all parameter IDs that are configured correct. The error ID must be reset with CmdResetError."},{"location":"par_id/par_id.html#program-structure","title":"Program structure","text":"<p>Parameter access is configured in the sub structure ParIds</p> ParIds Structure Function Execute This variable defines how the parameter ID is accessed. DONE indicates that one time access was finished. ONCE triggers as one time access. CYCLIC access transfers the data every task cycle. Keep in mind that the amount of data that can be transferred every cycle is limited. MULTI access transfers the data continuously as fast as possible but does not guaranty data access in every cycle.- mcACPAX_PARID_DONE- mcACPAX_PARID_GET_ONCE- mcACPAX_PARID_SET_ONCE- mcACPAX_PARID_GET_CYCLIC- mcACPAX_PARID_SET_CYCLIC- mcACPAX_PARID_GET_MULTI- mcACPAX_PARID_SET_MULTI Variable Variable name as string. Use 'VariableName' for global variables and 'TaskName:VariableName' for local variables. Make sure that the variable data type matches the parameter ID data type. ParID Parameter ID number"},{"location":"par_id/par_id.html#sample-code","title":"Sample code","text":"<p>Here is a sample snippet that can be used as a starting point.</p>"},{"location":"par_id/par_id.html#program-init","title":"Program init","text":"<pre><code>    // --------------------------------------------------------------------------\n    // Preset ParID module\n    AxisParId.MpLink := ADR(gAxis_1);                               // MpLink for axis\n    AxisParId.CmdUpdate := TRUE;\n\n    // Acknowledge encoder battery error\n    mcACPAX_UDINT := 1;                                             // Par ID value: Reset encoder error\n    AxisParId.ParIds[1].Execute := mcACPAX_PARID_SET_ONCE;          // Execute write command once\n    AxisParId.ParIds[1].ParID := 719;                               // Encoder1: Encoder command\n    AxisParId.ParIds[1].Variable := 'Axis_1:mcACPAX_UDINT';         // Variable as string\n\n    // Read actual speed cyclic\n    mcSPEED_ACTUAL := 0;                                            // Par ID value: Actual speed\n    AxisParId.ParIds[2].Execute := mcACPAX_PARID_GET_CYCLIC;        // Execute write command cyclic\n    AxisParId.ParIds[2].ParID := 251;                               // Encoder1: Encoder command\n    AxisParId.ParIds[2].Variable := 'Axis_1:mcSPEED_ACTUAL';        // Variable as string\n\n    // Write maximum speed\n    mcSPEED_MAX := 0;                                               // Par ID value: Maximum speed\n    AxisParId.ParIds[3].Execute := mcACPAX_PARID_DONE;              // Dont execute command automatically\n    AxisParId.ParIds[3].ParID := 687;                               // Encoder1: Encoder command\n    AxisParId.ParIds[3].Variable := 'Axis_1:mcSPEED_MAX';           // Variable as string\n\nEND_PROGRAM\n</code></pre>"},{"location":"par_id/par_id.html#program-cyclic","title":"Program cyclic","text":"<pre><code>PROGRAM _CYCLIC\n    // --------------------------------------------------------------------------\n    // Call axis actions used for this drive\n    ParIDAction;\n\nEND_PROGRAM\n</code></pre>"},{"location":"par_id/par_id.html#revision","title":"Revision","text":"<p>Version 7 * Update mappMotion to 5.24 * Removed obsolete hardware * Added new outputs MaxReadDataBytes and MaxWriteDataBytes that show how many bytes are used by cyclic communication</p> <p>Version 6 * Only get variable data on update * Removed CmdResetError * Added CmdUpdate * Update to mappMotion 5.23</p> <p>Version 5</p> <ul> <li>Update to mappMotion 5.22.1</li> <li>Improved error handling</li> </ul> <p>Version 4</p> <ul> <li>Removed dependency from common</li> <li>Added cyclic par id exchange</li> <li>Simplified interface</li> </ul> <p>Version 3</p> <ul> <li>Renamed function block</li> </ul> <p>Version 2</p> <ul> <li>Renamed action</li> </ul> <p>Version 1</p> <ul> <li>First release</li> </ul>"},{"location":"refs/refs_motor_conv_ind.html","title":"Induction motor table conversion","text":""},{"location":"refs/refs_motor_conv_ind.html#conversion-table-for-induction-motors","title":"Conversion table for Induction motors","text":"<p>The conversion table was created to the best of our knowledge but there is no guaranty that it is 100% correct. Please double check critical values in the Automation Studio help before using them. If you find any errors or have any suggestions please create an issue on github. </p> <p>The table uses the following notation:</p>              The configuration column shows the Automation Studio configuration. Each branch in the tree is presented as a list. For example the value shown in the left picture is written as:                          InductionMotorNumber of pole pairs                                   The structure column shows the same value in code. Each element of the structure is presented as a list. For example the value shown in the left picture is written as:                          MotorPowerRatingPlateNumberOfPolePairs         SwitchingPTC thermistor      Configuration name Structure name Constant Par ID Note InductionMotorNominal speed MotorPowerRatingPlateNominalSpeed MOTOR_SPEED_RATED 50 Power rating plate InductionMotorNominal frequency MotorPowerRatingPlateNominalFrequency MOTOR_FREQ_RATED Power rating plate InductionMotorNominal voltage MotorPowerRatingPlateNominalVoltage MOTOR_VOLTAGE_RATED 48 Power rating plate InductionMotorNominal current MotorPowerRatingPlateNominalCurrent MOTOR_CURR_RATED 57 Power rating plate InductionMotorPower Factor MotorPowerRatingPlatePowerFactor MOTOR_POWER_FACTOR Power rating plate InductionMotorNominal ambient temperature MotorPowerRatingPlateNominalAmbientTemperature MOTOR_AMB_TEMP_RATED 865 InductionMotorOptional ParametersNumber of pole pairs MotorPowerRatingPlateOptionalParameterNumberOfPolePairs MOTOR_POLEPAIRS 47 Power rating plate InductionMotorOptional ParametersMaximum speed MotorPowerRatingPlateOptionalParameterMaximumSpeed MOTOR_SPEED_MAX 51 Power rating plate InductionMotorOptional ParametersStall current MotorPowerRatingPlateOptionalParameterStallCurrent MOTOR_CURR_STALL 56 Power rating plate InductionMotorOptional ParametersPeak current MotorPowerRatingPlateOptionalParameterPeakCurrent MOTOR_CURR_MAX 58 Power rating plate InductionMotorOptional ParametersMagnetizing current MotorPowerRatingPlateOptionalParameterMagnetizingCurrent MOTOR_MAGNETIZING_CURR 59 Power rating plate InductionMotorOptional ParametersNominal Power MotorPowerRatingPlateOptionalParameterNominalPower MOTOR_POWER_RATED Power rating plate InductionMotorOptional ParametersNominal torque MotorPowerRatingPlateOptionalParameterNominalTorque MOTOR_TORQ_RATED 53 Power rating plate InductionMotorOptional ParametersStall torque MotorPowerRatingPlateOptionalParameterStallTorque MOTOR_TORQ_STALL 52 Power rating plate InductionMotorOptional ParametersPeak torque MotorPowerRatingPlateOptionalParameterPeakTorque MOTOR_TORQ_MAX 54 Power rating plate InductionMotorOptional ParametersMoment of inertia MotorPowerRatingPlateOptionalParameterMomentOfInertia MOTOR_INERTIA 62 Power rating plateAS uses kgcm<sup>2</sup>PAR ID uses kgm<sup>2</sup> InductionMotorNominal speed MotorStarEquivalentCircuitNominalSpeed MOTOR_SPEED_RATED 50 Star equivalent circuit InductionMotorMaximum speed MotorStarEquivalentCircuitMaximumSpeed MOTOR_SPEED_MAX 51 Star equivalent circuit InductionMotorNominal voltage MotorStarEquivalentCircuitNominalVoltage MOTOR_VOLTAGE_RATED 48 Star equivalent circuit InductionMotorNominal current MotorStarEquivalentCircuitNominalCurrent MOTOR_CURR_RATED 57 Star equivalent circuit InductionMotorStall current MotorStarEquivalentCircuitStallCurrent MOTOR_CURR_STALL 56 Star equivalent circuit InductionMotorPeak current MotorStarEquivalentCircuitPeakCurrent MOTOR_CURR_MAX 58 Star equivalent circuit InductionMotorMagnetizing current MotorStarEquivalentCircuitMagnetizingCurrent MOTOR_MAGNETIZING_CURR 59 Star equivalent circuit InductionMotorNominal torque MotorStarEquivalentCircuitNominalTorque MOTOR_TORQ_RATED 53 Star equivalent circuit InductionMotorStall torque MotorStarEquivalentCircuitStallTorque MOTOR_TORQ_STALL 52 Star equivalent circuit InductionMotorPeak torque MotorStarEquivalentCircuitPeakTorque MOTOR_TORQ_MAX 54 Star equivalent circuit InductionMotorStator resistance MotorStarEquivalentCircuitStatorResistance MOTOR_STATOR_RESISTANCE 60 Star equivalent circuit InductionMotorRotor resistance MotorStarEquivalentCircuitRotorResistance MOTOR_ROTOR_RESISTANCE 76 Star equivalent circuit InductionMotorStator inductance MotorStarEquivalentCircuitStatorInductance MOTOR_STATOR_INDUCTANCE 61 Star equivalent circuit InductionMotorRotor inductance MotorStarEquivalentCircuitRotorInductance MOTOR_ROTOR_INDUCTANCE 77 Star equivalent circuit InductionMotorMutual inductance MotorStarEquivalentCircuitMutualInductance MOTOR_MUTUAL_INDUCTANCE 78 Star equivalent circuit InductionMotorMoment of inertia MotorStarEquivalentCircuitMomentOfInertia MOTOR_INERTIA 62 Star equivalent circuitAS uses kgcm<sup>2</sup>PAR ID uses kgm<sup>2</sup> InductionMotorNominal ambient temperature MotorStarEquivalentCircuitNominalAmbientTemperature MOTOR_AMB_TEMP_RATED 865 InductionMotorVoltage limitationMaximum DC bus voltage MotorStarEquivalentCircuitVoltageLimitationUsedMaximumDCBusVoltage MOTOR_UDC_MAX 1641 Star equivalent circuit InductionMotorTemperature sensorLimit temperature MotorPowerRatingPlateTemperatureSensorThermistorLimitTemperature MOTOR_TEMPSENS_LIM 1216 Thermistor InductionMotorTemperature sensorTemperature sensor interface MotorPowerRatingPlateTemperatureSensorThermistorTemperatureSensorInterface Thermistor InductionMotorTemperature sensorResistanceR0 MotorPowerRatingPlateTemperatureSensorThermistorResistanceR0 MOTOR_TEMPSENS_PAR1 64 Thermistor InductionMotorTemperature sensorResistanceR7 MotorPowerRatingPlateTemperatureSensorThermistorResistanceR7 MOTOR_TEMPSENS_PAR2 65 Thermistor InductionMotorTemperature sensorTemperatureT0 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT0 MOTOR_TEMPSENS_PAR3 66 Thermistor InductionMotorTemperature sensorTemperatureT1 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT1 MOTOR_TEMPSENS_PAR4 67 Thermistor InductionMotorTemperature sensorTemperatureT2 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT2 MOTOR_TEMPSENS_PAR5 68 Thermistor InductionMotorTemperature sensorTemperatureT3 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT3 MOTOR_TEMPSENS_PAR6 69 Thermistor InductionMotorTemperature sensorTemperatureT4 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT4 MOTOR_TEMPSENS_PAR7 70 Thermistor InductionMotorTemperature sensorTemperatureT5 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT5 MOTOR_TEMPSENS_PAR8 71 Thermistor InductionMotorTemperature sensorTemperatureT6 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT6 MOTOR_TEMPSENS_PAR9 72 Thermistor InductionMotorTemperature sensorTemperatureT7 MotorPowerRatingPlateTemperatureSensorThermistorTemperatureT7 MOTOR_TEMPSENS_PAR10 73 Thermistor InductionMotorTemperature sensorTemperature sensor interface MotorPowerRatingPlateTemperatureSensorThermistorTemperatureSensorInterface SwitchingPTC thermistor InductionMotorTemperature sensorNominal response resistance MotorPowerRatingPlateTemperatureSensorSwitchingPTCThermistorNominalResponseTemperature MOTOR_TEMPSENS_PAR1 64 SwitchingPTC thermistor InductionMotorTemperature sensorMinimum resistance MotorPowerRatingPlateTemperatureSensorSwitchingPTCThermistorMinimumResistance MOTOR_TEMPSENS_PAR2 65 SwitchingPTC thermistor InductionMotorTemperature sensorTemperaNominal response temperature MotorPowerRatingPlateTemperatureSensorSwitchingPTCThermistorNominalResponseTemperature MOTOR_TEMPSENS_PAR3 66 SwitchingPTC thermistor InductionMotorTemperature sensorTemperature sensor interface MotorPowerRatingPlateTemperatureSensorThermoswitchesTemperatureSensorInterface Thermoswitches InductionMotorTemperature sensorNominal response resistance MotorPowerRatingPlateTemperatureSensorThermoswitchesNominalResponseTemperature MOTOR_TEMPSENS_PAR1 64 Thermoswitches InductionMotorTemperature sensorMinimum resistance MotorPowerRatingPlateTemperatureSensorThermoswitchesSwitchingStateOnOvertemperature MOTOR_TEMPSENS_PAR10 73 Thermoswitches InductionMotorTemperature modelCurrent-basedLimit temperature MotorPowerRatingPlateTemperatureModelCurrentBasedLimitTemperature MOTOR_WIND_TEMP_MAX 74 Current-based InductionMotorTemperature model MotorPowerRatingPlateTemperatureModel TEMP_MOTOR_MODEL_MODE 373 Current-basedCurrent- and speed-based InductionMotorTemperature modelCurrent-basedWinding cross section MotorPowerRatingPlateTemperatureModelCurrentBasedWindingCrossSection MOTOR_WIND_CROSS_SECT 59 Current-based InductionMotorTemperature modelCurrent-basedThermal tripping time MotorPowerRatingPlateTemperatureModelCurrentBasedThermalTrippingTime PIDENT_THERM_TRIP_TIME 1283 Current-based InductionMotorTemperature modelCurrent-basedThermal time constant MotorPowerRatingPlateTemperatureModelCurrentBasedThermalTimeConstant MOTOR_TAU_THERM 849 Current-based InductionMotorTemperature modelCurrent- and speed-basedLimit temperature MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedLimitTemperature MOTOR_WIND_TEMP_MAX 74 Current- and speed-based InductionMotorTemperature modelCurrent- and speed-basedCalculation methodWinding cross section MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkWindingCrossSection MOTOR_WIND_CROSS_SECT 74 Current- and speed-basedSecond-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal tripping time MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkCalculationMethodSecondOrderThermalNetworkThermalTrippingTime PIDENT_THERM_TRIP_TIME 1283 Current- and speed-basedSecond-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal time constant MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkThermalTimeConstant MOTOR_TAU_THERM 849 Current- and speed-basedSecond-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalResistance1 MOTOR_TEMPMODEL_RES1 1211 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalCapacity1 MOTOR_TEMPMODEL_CAP1 1212 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalResistance2 MOTOR_TEMPMODEL_RES2 1213 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalCapacity2 MOTOR_TEMPMODEL_CAP2 1214 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkStatorThermalLoss1 MOTOR_TEMPMODEL_LOSS1 1489 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkStatorThermalLoss2 MOTOR_TEMPMODEL_LOSS2 1490 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkWindingThermalLoss1 MOTOR_TEMPMODEL_LOSS1_W 1654 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkWindingThermalLoss2 MOTOR_TEMPMODEL_LOSS2_W 1655 Current- and speed-basedFourth-order thermal network InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance1 MOTOR_TEMPMODEL_RES1 1211 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalCapacity1 MOTOR_TEMPMODEL_CAP1 1212 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance2 MOTOR_TEMPMODEL_RES2 1213 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalCapacity2 MOTOR_TEMPMODEL_CAP2 1214 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 3 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance3 MOTOR_TEMPMODEL_RES3 1653 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsStatorThermalLoss1 MOTOR_TEMPMODEL_LOSS1 1489 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsStatorThermalLoss2 MOTOR_TEMPMODEL_LOSS2 1490 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 1 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplings&lt;br/WindingThermalLoss1 MOTOR_TEMPMODEL_LOSS1_W 1654 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 2 MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsWindingThermalLoss2 MOTOR_TEMPMODEL_LOSS2_W 1655 Current- and speed-basedFourth-order thermal network with couplings InductionMotorTemperature modelCurrent- and speed-basedCalculation methodReference TemperatureTemperature offset MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsReferenceTemperatureEncoderTemperatureSensorTemperatureOffset MOTOR_TEMPMODEL_REF_OFF 1706 Current- and speed-basedFourth-order thermal network with couplingsReference TemperatureEncoder temperature sensor InductionMotorTemperature modelCurrent- and speed-basedCalculation methodReference TemperatureTime constant MotorPowerRatingPlateTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsReferenceTemperatureEncoderTemperatureSensorTimeConstant MOTOR_TEMPMODEL_REF_TAU 1707 Current- and speed-basedFourth-order thermal network with couplingsReference TemperatureEncoder temperature sensor InductionBrakeNominal current BrakeUsedNominalCurrent MOTOR_BRAKE_CURR_RATED 42 InductionBrakeNominal torque BrakeUsedNominalTorque MOTOR_BRAKE_TORQ_RATED 43 InductionBrakeActivation delay BrakeUsedActivationDelay MOTOR_BRAKE_ON_TIME 44 InductionBrakeRelease delay BrakeUsedReleaseDelay MOTOR_BRAKE_OFF_TIME 45 InductionBrakeMoment of inertia BrakeUsedMomentOfInertia MOTOR_BRAKE_INERTIA InductionBrakeControl mode BrakeUsedControlMode Voltage controlled InductionBrakeControl modeRelease voltage BrakeUsedControlModeVoltageControlledReleaseVoltage MOTOR_BRAKE_VOLT_REL 1504 Voltage controlled InductionBrakeControl modeHold voltage BrakeUsedControlModeVoltageControlledHoldVoltage MOTOR_BRAKE_VOLT_HOLD 1505 Voltage controlled InductionBrakeLimitsMaximum voltage BrakeUsedLimitsUsedMaximumVoltage MOTOR_BRAKE_VOLT_MAX 1506 Voltage controlled InductionEncoderProof of fatigue strength MOTOR_ENCOD_ATTR 652 InductionEncoderMoment of inertia EncoderUsedMomentOfInertia MOTOR_ENCOD_INERTIA InductionEncoderTemperature sensorLimit temperature EncoderUsedTemperatureSensorUsedLimitTemperature MOTOR_ENCOD_TEMP_LIM 1209 InductionGearboxGear ratioinput GearboxUsedGearRatio Only one value in code InductionGearboxGear ratiooutput GearboxUsedGearRatio Only one value in code InductionGearboxMaximum input speed GearboxUsedMaximumInputSpeed MOTORGEAR_SPEED_MAX 1695 InductionGearboxNominal output torque GearboxUsedNominalOutputTorque MOTORGEAR_TORQ_NOM 1693 InductionGearboxPeak output torque GearboxUsedPeakOutputTorque MOTORGEAR_TORQ_MAX 1694 InductionGearboxMoment of inertia GearboxUsedMomentOfInertia MOTORGEAR_INERTIA"},{"location":"refs/refs_motor_conv_sync.html","title":"Synchronous motor table conversion","text":""},{"location":"refs/refs_motor_conv_sync.html#conversion-table-for-synchronous-motors","title":"Conversion table for synchronous motors","text":"<p>The conversion table was created to the best of our knowledge but there is no guaranty that it is 100% correct. Please double check critical values in the Automation Studio help before using them. If you find any errors or have any suggestions please create an issue on github. </p> <p>The table uses the following notation:</p>              The configuration column shows the Automation Studio configuration. Each branch in the tree is presented as a list. For example the value shown in the left picture is written as:                          SynchronousMotorNumber of pole pairs                                   The structure column shows the same value in code. Each element of the structure is presented as a list. For example the value shown in the left picture is written as:                          MotorDefaultNumberOfPolePairs          Configuration name Structure name Constant Par ID Note SynchronousMotorNumber of pole pairs MotorDefaultNumberOfPolePairs MOTOR_POLEPAIRS 47 SynchronousMotorNominal speed MotorDefaultNominalSpeed MOTOR_SPEED_RATED 50 SynchronousMotorMaximum speed MotorDefaultMaximumSpeed MOTOR_SPEED_MAX 51 SynchronousMotorNominal voltage MotorDefaultNominalVoltage MOTOR_VOLTAGE_RATED 48 SynchronousMotorNominal current MotorDefaultNominalCurrent MOTOR_CURR_RATED 57 SynchronousMotorStall current MotorDefaultStallCurrent MOTOR_CURR_STALL 56 SynchronousMotorPeak current MotorDefaultPeakCurrent MOTOR_CURR_MAX 58 SynchronousMotorNominal torque MotorDefaultNominalTorque MOTOR_TORQ_RATED 53 SynchronousMotorStall torque MotorDefaultStallTorque MOTOR_TORQ_STALL 52 SynchronousMotorPeak torque MotorDefaultPeakTorque MOTOR_TORQ_MAX 54 SynchronousMotorVoltage constant MotorDefaultVoltageConstant MOTOR_VOLTAGE_CONST 49 SynchronousMotorTorque constant MotorDefaultTorqueConstant MOTOR_TORQ_CONST 55 SynchronousMotorStator resistance MotorDefaultStatorResistance MOTOR_STATOR_RESISTANCE 60 SynchronousMotorStator inductance MotorDefaultStatorInductance MOTOR_STATOR_INDUCTANCE 61 AS uses mHPAR ID uses H SynchronousMotorMoment of inertia MotorDefaultMomentOfInertia MOTOR_INERTIA 62 AS uses kgcm<sup>2</sup>PAR ID uses kgm<sup>2</sup> SynchronousMotorNominal ambient temperature MotorDefaultNominalAmbientTemperature MOTOR_AMB_TEMP_RATED 865 SynchronousMotorVoltage limitationMaximum DC bus voltage MotorDefaultMaximumDCBusVoltage MOTOR_UDC_MAX 1641 SynchronousMotorEncoder mountingAngleCommutation offset MotorDefaultEncoderMountingAngleUserDefinedCommutationOffset MOTOR_COMMUT_OFFSET 63 User-Defined SynchronousMotorEncoder mountingAngleAutomatic identification MotorDefaultEncoderMountingAngleUndefinedAutomaticIdentification PHASING_MODE 276 Undefined (Direct)SaturationDitherDither2 SynchronousMotorEncoder mountingAngleAutomatic identification MotorDefaultEncoderMountingAngleUndefinedAutomaticIdentificationSaturationPhasingCurrent PHASING_CURR 275 Undefined (Direct)SaturationDitherDither2 SynchronousMotorEncoder mountingAngleAutomatic identification MotorDefaultEncoderMountingAngleUndefinedAutomaticIdentificationDitherPhasingTime PHASING_TIME 874 UndefinedDitherDither2 SynchronousMotorTemperature sensorLimit temperature MotorDefaultTemperatureSensorThermistorLimitTemperature MOTOR_TEMPSENS_LIM 1216 Thermistor SynchronousMotorTemperature sensorTemperature sensor interface MotorDefaultTemperatureSensorThermistorTemperatureSensorInterface Thermistor SynchronousMotorTemperature sensorResistanceR0 MotorDefaultTemperatureSensorThermistorResistanceR0 MOTOR_TEMPSENS_PAR1 64 Thermistor SynchronousMotorTemperature sensorResistanceR7 MotorDefaultTemperatureSensorThermistorResistanceR7 MOTOR_TEMPSENS_PAR2 65 Thermistor SynchronousMotorTemperature sensorTemperatureT0 MotorDefaultTemperatureSensorThermistorTemperatureT0 MOTOR_TEMPSENS_PAR3 66 Thermistor SynchronousMotorTemperature sensorTemperatureT1 MotorDefaultTemperatureSensorThermistorTemperatureT1 MOTOR_TEMPSENS_PAR4 67 Thermistor SynchronousMotorTemperature sensorTemperatureT2 MotorDefaultTemperatureSensorThermistorTemperatureT2 MOTOR_TEMPSENS_PAR5 68 Thermistor SynchronousMotorTemperature sensorTemperatureT3 MotorDefaultTemperatureSensorThermistorTemperatureT3 MOTOR_TEMPSENS_PAR6 69 Thermistor SynchronousMotorTemperature sensorTemperatureT4 MotorDefaultTemperatureSensorThermistorTemperatureT4 MOTOR_TEMPSENS_PAR7 70 Thermistor SynchronousMotorTemperature sensorTemperatureT5 MotorDefaultTemperatureSensorThermistorTemperatureT5 MOTOR_TEMPSENS_PAR8 71 Thermistor SynchronousMotorTemperature sensorTemperatureT6 MotorDefaultTemperatureSensorThermistorTemperatureT6 MOTOR_TEMPSENS_PAR9 72 Thermistor SynchronousMotorTemperature sensorTemperatureT7 MotorDefaultTemperatureSensorThermistorTemperatureT7 MOTOR_TEMPSENS_PAR10 73 Thermistor SynchronousMotorTemperature sensorTemperature sensor interface MotorDefaultTemperatureSensorThermistorTemperatureSensorInterface SwitchingPTC thermistor SynchronousMotorTemperature sensorNominal response resistance MotorDefaultTemperatureSensorSwitchingPTCThermistorNominalResponseTemperature MOTOR_TEMPSENS_PAR1 64 SwitchingPTC thermistor SynchronousMotorTemperature sensorMinimum resistance MotorDefaultTemperatureSensorSwitchingPTCThermistorMinimumResistance MOTOR_TEMPSENS_PAR2 65 SwitchingPTC thermistor SynchronousMotorTemperature sensorTemperaNominal response temperature MotorDefaultTemperatureSensorSwitchingPTCThermistorNominalResponseTemperature MOTOR_TEMPSENS_PAR3 66 SwitchingPTC thermistor SynchronousMotorTemperature sensorTemperature sensor interface MotorDefaultTemperatureSensorThermoswitchesTemperatureSensorInterface Thermoswitches SynchronousMotorTemperature sensorNominal response resistance MotorDefaultTemperatureSensorThermoswitchesNominalResponseTemperature MOTOR_TEMPSENS_PAR1 64 Thermoswitches SynchronousMotorTemperature sensorMinimum resistance MotorDefaultTemperatureSensorThermoswitchesSwitchingStateOnOvertemperature MOTOR_TEMPSENS_PAR10 73 Thermoswitches SynchronousMotorTemperature modelCurrent-basedLimit temperature MotorDefaultTemperatureModelCurrentBasedLimitTemperature MOTOR_WIND_TEMP_MAX 74 Current-based SynchronousMotorTemperature model MotorDefaultTemperatureModel TEMP_MOTOR_MODEL_MODE 373 Current-basedCurrent- and speed-based SynchronousMotorTemperature modelCurrent-basedWinding cross section MotorDefaultTemperatureModelCurrentBasedWindingCrossSection MOTOR_WIND_CROSS_SECT 59 Current-based SynchronousMotorTemperature modelCurrent-basedThermal tripping time MotorDefaultTemperatureModelCurrentBasedThermalTrippingTime PIDENT_THERM_TRIP_TIME 1283 Current-based SynchronousMotorTemperature modelCurrent-basedThermal time constant MotorDefaultTemperatureModelCurrentBasedThermalTimeConstant MOTOR_TAU_THERM 849 Current-based SynchronousMotorTemperature modelCurrent- and speed-basedLimit temperature MotorDefaultTemperatureModelCurrentAndSpeedBasedLimitTemperature MOTOR_WIND_TEMP_MAX 74 Current- and speed-based SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodWinding cross section MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkWindingCrossSection MOTOR_WIND_CROSS_SECT 74 Current- and speed-basedSecond-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal tripping time MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkCalculationMethodSecondOrderThermalNetworkThermalTrippingTime PIDENT_THERM_TRIP_TIME 1283 Current- and speed-basedSecond-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal time constant MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodSecondOrderThermalNetworkThermalTimeConstant MOTOR_TAU_THERM 849 Current- and speed-basedSecond-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalResistance1 MOTOR_TEMPMODEL_RES1 1211 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalCapacity1 MOTOR_TEMPMODEL_CAP1 1212 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalResistance2 MOTOR_TEMPMODEL_RES2 1213 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkThermalCapacity2 MOTOR_TEMPMODEL_CAP2 1214 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkStatorThermalLoss1 MOTOR_TEMPMODEL_LOSS1 1489 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderThermalNetworkStatorThermalLoss2 MOTOR_TEMPMODEL_LOSS2 1489 Current- and speed-basedFourth-order thermal network SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance1 MOTOR_TEMPMODEL_RES1 1211 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalCapacity1 MOTOR_TEMPMODEL_CAP1 1212 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance2 MOTOR_TEMPMODEL_RES2 1213 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal capacity 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalCapacity2 MOTOR_TEMPMODEL_CAP2 1214 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodThermal resistance 3 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsThermalResistance3 MOTOR_TEMPMODEL_RES3 1653 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsStatorThermalLoss1 MOTOR_TEMPMODEL_LOSS1 1489 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodStator thermal loss 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsStatorThermalLoss2 MOTOR_TEMPMODEL_LOSS2 1490 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 1 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsWindingThermalLoss1 MOTOR_TEMPMODEL_LOSS1_W 1654 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodWinding thermal loss 2 MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsWindingThermalLoss2 MOTOR_TEMPMODEL_LOSS2_W 1655 Current- and speed-basedFourth-order thermal network with couplings SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodReference TemperatureTemperature offset MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsReferenceTemperatureEncoderTemperatureSensorTemperatureOffset MOTOR_TEMPMODEL_REF_OFF 1706 Current- and speed-basedFourth-order thermal network with couplingsReference TemperatureEncoder temperature sensor SynchronousMotorTemperature modelCurrent- and speed-basedCalculation methodReference TemperatureTime constant MotorDefaultTemperatureModelCurrentAndSpeedBasedCalculationMethodFourthOrderWithCouplingsReferenceTemperatureEncoderTemperatureSensorTimeConstant MOTOR_TEMPMODEL_REF_TAU 1707 Current- and speed-basedFourth-order thermal network with couplingsReference TemperatureEncoder temperature sensor SynchronousBrakeNominal current BrakeUsedNominalCurrent MOTOR_BRAKE_CURR_RATED 42 SynchronousBrakeNominal torque BrakeUsedNominalTorque MOTOR_BRAKE_TORQ_RATED 43 SynchronousBrakeActivation delay BrakeUsedActivationDelay MOTOR_BRAKE_ON_TIME 44 SynchronousBrakeRelease delay BrakeUsedReleaseDelay MOTOR_BRAKE_OFF_TIME 45 SynchronousBrakeMoment of inertia BrakeUsedMomentOfInertia MOTOR_BRAKE_INERTIA SynchronousBrakeControl modeRelease voltage BrakeUsedControlModeVoltageControlledReleaseVoltage MOTOR_BRAKE_VOLT_REL 1504 Voltage controlled SynchronousBrakeControl modeHold voltage BrakeUsedControlModeVoltageControlledHoldVoltage MOTOR_BRAKE_VOLT_HOLD 1505 Voltage controlled SynchronousBrakeLimitsMaximum voltage BrakeUsedLimitsUsedMaximumVoltage MOTOR_BRAKE_VOLT_MAX 1506 Voltage controlled SynchronousEncoderProof of fatigue strength MOTOR_ENCOD_ATTR 652 SynchronousEncoderMoment of inertia EncoderUsedMomentOfInertia MOTOR_ENCOD_INERTIA SynchronousEncoderTemperature sensorLimit temperature EncoderUsedTemperatureSensorUsedLimitTemperature MOTOR_ENCOD_TEMP_LIM 1209 SynchronousGearboxGear ratioinput GearboxUsedGearRatio Only one value in code SynchronousGearboxGear ratiooutput GearboxUsedGearRatio Only one value in code SynchronousGearboxMaximum input speed GearboxUsedMaximumInputSpeed MOTORGEAR_SPEED_MAX 1695 SynchronousGearboxNominal output torque GearboxUsedNominalOutputTorque MOTORGEAR_TORQ_NOM 1693 SynchronousGearboxPeak output torque GearboxUsedPeakOutputTorque MOTORGEAR_TORQ_MAX 1694 SynchronousGearboxMoment of inertia GearboxUsedMomentOfInertia MOTORGEAR_INERTIA"}]}