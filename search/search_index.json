{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction This is project contains several samples for mappMotion. The samples are broken up in branches to focus on a single function at a time. The main branch has a base example with some basic motion functions. This main sample is then expanded to the specific function. The description for each function has a link to the branch used. To download a specific sample follow these steps: This sample can run in simulation mode (http://127.0.0.1:81/). Requirements Automation Studio 4.12 mappView 5.22 mappServices 5.22","title":"Start"},{"location":"index.html#introduction","text":"This is project contains several samples for mappMotion. The samples are broken up in branches to focus on a single function at a time. The main branch has a base example with some basic motion functions. This main sample is then expanded to the specific function. The description for each function has a link to the branch used. To download a specific sample follow these steps: This sample can run in simulation mode (http://127.0.0.1:81/).","title":"Introduction"},{"location":"index.html#requirements","text":"Automation Studio 4.12 mappView 5.22 mappServices 5.22","title":"Requirements"},{"location":"brake.html","text":"The brake sample provides an easy interface to control the brake parameters and function. Also see Automation Studio help (00ef9572-f1d5-43b5-9815-90e510eaeb7f) for a description of MC_BR_BrakeTest_AcpAx Repo Link Here is the link to the repository. Command structure The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdClose Close brake CmdOpen Open brake CmdSetPar Set brake parameter MpLink The axis reference establishes the connection between the function block and an axis ParBrake Configuration parameters StaBrake Configuration parameters ErrId Error ID Program structure The program consists of a state machine where the commands are executed. When a brake open or close command is executed the status of the brake is checked in an additional step. Sample code Here is a sample snippet that can be used as a starting point. Program init PROGRAM _INIT // -------------------------------------------------------------------------- // Set brake parameters, disable brake restrictions AxisBrake.MpLink := ADR(gAxis_1); // MpLink reference for axis AxisBrake.ParBrake.RestrictedBrakeControl := mcSWITCH_OFF; // Allow brake to be turned off AxisBrake.CmdSetPar := TRUE; // Call parameter set command END_PROGRAM Program cyclic PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Brake; END_PROGRAM Revision Version 1 - First release","title":"Brake"},{"location":"brake.html#repo-link","text":"Here is the link to the repository.","title":"Repo Link"},{"location":"brake.html#command-structure","text":"The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdClose Close brake CmdOpen Open brake CmdSetPar Set brake parameter MpLink The axis reference establishes the connection between the function block and an axis ParBrake Configuration parameters StaBrake Configuration parameters ErrId Error ID","title":"Command structure"},{"location":"brake.html#program-structure","text":"The program consists of a state machine where the commands are executed. When a brake open or close command is executed the status of the brake is checked in an additional step.","title":"Program structure"},{"location":"brake.html#sample-code","text":"Here is a sample snippet that can be used as a starting point.","title":"Sample code"},{"location":"brake.html#program-init","text":"PROGRAM _INIT // -------------------------------------------------------------------------- // Set brake parameters, disable brake restrictions AxisBrake.MpLink := ADR(gAxis_1); // MpLink reference for axis AxisBrake.ParBrake.RestrictedBrakeControl := mcSWITCH_OFF; // Allow brake to be turned off AxisBrake.CmdSetPar := TRUE; // Call parameter set command END_PROGRAM","title":"Program init"},{"location":"brake.html#program-cyclic","text":"PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Brake; END_PROGRAM","title":"Program cyclic"},{"location":"brake.html#revision","text":"Version 1 - First release","title":"Revision"},{"location":"motor_cfg.html","text":"The motor configuration sample provides an example how to change a motor during runtime. If there is no preferred motor during development or the motor parameters are unknown the motor type \"MotorSynchronous_any\" or \"MotorInduction_any\" can be used in the hardware tree. After changing the motor parameters the PLC must be reboot for the changes to take affect. Also see Automation Studio help (9c2eadae-8494-4e9a-b305-0afa2dabf1d4) for a description of MC_BR_ProcessConfig Repo Link Here is the link to the repository. Command structure The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdSetMotor Set the new motor parameters CmdGetMotor Get the active motor parameters MpLink The axis reference establishes the connection between the function block and an axis ParMotorType There are two types of possible motor configuration. Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors ParMotorSynchronous Parameters for synchronous motor for set command StaMotorSynchronous Parameters for synchronous motor for get command ParMotorInduction Parameters for induction motor for set command StaMotorInduction Parameters for induction motor for get command ErrId Error ID Program structure The program consists of a state machine to execute the commands. The B&R function block that changed the motor configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_MOTOR_CFG_PRE_SET. From this step the state machine goes to the read or write state. The motor parameter can be provided as a separate file and action (see example). It is also possible to set the parameters directly in the structure ParMotorSynchronous or StaMotorInduction. After changing the motor parameters the PLC must be reboot for the changes to take affect. Sample code Here is a sample snippet that can be used as a starting point. Program init PROGRAM _INIT // -------------------------------------------------------------------------- // Motor configuration AxisMotorCfg.MpLink := ADR(gAxis_1); // MpLink for axis AxisMotorCfg.ParMotorType := AX_MOTOR_TYPE_SYNCHRONOUS; // Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors Motor_8LVB13_B1030F300_00; // This action contains the new motor parameters (see additional file with the same name) END_PROGRAM Program cyclic PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Common; // Includes the reboot command MotorCfg; // Call motor configuration code END_PROGRAM Revision Version 1 - First release","title":"Motor Configuration"},{"location":"motor_cfg.html#repo-link","text":"Here is the link to the repository.","title":"Repo Link"},{"location":"motor_cfg.html#command-structure","text":"The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdSetMotor Set the new motor parameters CmdGetMotor Get the active motor parameters MpLink The axis reference establishes the connection between the function block and an axis ParMotorType There are two types of possible motor configuration. Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors ParMotorSynchronous Parameters for synchronous motor for set command StaMotorSynchronous Parameters for synchronous motor for get command ParMotorInduction Parameters for induction motor for set command StaMotorInduction Parameters for induction motor for get command ErrId Error ID","title":"Command structure"},{"location":"motor_cfg.html#program-structure","text":"The program consists of a state machine to execute the commands. The B&R function block that changed the motor configuration needs a name path and not just the MpLink. This name is constructed automatically in the step STATE_MOTOR_CFG_PRE_SET. From this step the state machine goes to the read or write state. The motor parameter can be provided as a separate file and action (see example). It is also possible to set the parameters directly in the structure ParMotorSynchronous or StaMotorInduction. After changing the motor parameters the PLC must be reboot for the changes to take affect.","title":"Program structure"},{"location":"motor_cfg.html#sample-code","text":"Here is a sample snippet that can be used as a starting point.","title":"Sample code"},{"location":"motor_cfg.html#program-init","text":"PROGRAM _INIT // -------------------------------------------------------------------------- // Motor configuration AxisMotorCfg.MpLink := ADR(gAxis_1); // MpLink for axis AxisMotorCfg.ParMotorType := AX_MOTOR_TYPE_SYNCHRONOUS; // Use AX_MOTOR_TYPE_SYNCHRONOUS for synchronous motors and AX_MOTOR_TYPE_INDUCTION for induction motors Motor_8LVB13_B1030F300_00; // This action contains the new motor parameters (see additional file with the same name) END_PROGRAM","title":"Program init"},{"location":"motor_cfg.html#program-cyclic","text":"PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Common; // Includes the reboot command MotorCfg; // Call motor configuration code END_PROGRAM","title":"Program cyclic"},{"location":"motor_cfg.html#revision","text":"Version 1 - First release","title":"Revision"},{"location":"par_id.html","text":"The par ID sample provides an easy interface to control the ACOPOS parameter IDs. Also see Automation Studio help (64f032b8-d12d-4fdf-a118-179256305dcf) for a complete list of parameter IDs. (89221e8a-e9dd-427b-a12b-2b75d6f5fe83) for a description of MC_BR_ProcessParID_AcpAx Repo Link Here is the link to the repository. Command structure The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdSetPar Set the parameter IDs from the list ParIds CmdGetPar Get the parameter IDs from the list ParIds MpLink The axis reference establishes the connection between the function block and an axis ParIds Array of parameters IDs, variable addresses and data types ParNum Number of parameter IDs that are used within array ErrId Error ID Program structure The program consists of a a simple clause that executes the two commands. The sample provides the following predefined variables that can be used to read or write parameters IDs. mcACPAX_BOOL mcACPAX_SINT mcACPAX_INT mcACPAX_DINT mcACPAX_USINT mcACPAX_UINT mcACPAX_UDINT mcACPAX_REAL Sample code Here is a sample snippet that can be used as a starting point. Program init PROGRAM _INIT // -------------------------------------------------------------------------- // Acknowledge encoder battery error mcACPAX_UDINT[1] := 1; // Par ID value: Reset encoder error AxisParId.MpLink := ADR(gAxis_1); // MpLink for axis AxisParId.ParNum := 1; // Number of parameter IDs AxisParId.ParIds[1].ParID := 719; // Encoder1: Encoder command AxisParId.ParIds[1].VariableAddress := ADR(mcACPAX_UDINT[1]); // Pointer to predefined variable AxisParId.ParIds[1].DataType := mcACPAX_PARTYPE_UDINT; // Data type of predefined variable AxisParId.CmdSetPar := TRUE; // Execute command END_PROGRAM Program cyclic PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Common; ParID; END_PROGRAM Revision Version 1 - First release","title":"Par ID"},{"location":"par_id.html#repo-link","text":"Here is the link to the repository.","title":"Repo Link"},{"location":"par_id.html#command-structure","text":"The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdSetPar Set the parameter IDs from the list ParIds CmdGetPar Get the parameter IDs from the list ParIds MpLink The axis reference establishes the connection between the function block and an axis ParIds Array of parameters IDs, variable addresses and data types ParNum Number of parameter IDs that are used within array ErrId Error ID","title":"Command structure"},{"location":"par_id.html#program-structure","text":"The program consists of a a simple clause that executes the two commands. The sample provides the following predefined variables that can be used to read or write parameters IDs. mcACPAX_BOOL mcACPAX_SINT mcACPAX_INT mcACPAX_DINT mcACPAX_USINT mcACPAX_UINT mcACPAX_UDINT mcACPAX_REAL","title":"Program structure"},{"location":"par_id.html#sample-code","text":"Here is a sample snippet that can be used as a starting point.","title":"Sample code"},{"location":"par_id.html#program-init","text":"PROGRAM _INIT // -------------------------------------------------------------------------- // Acknowledge encoder battery error mcACPAX_UDINT[1] := 1; // Par ID value: Reset encoder error AxisParId.MpLink := ADR(gAxis_1); // MpLink for axis AxisParId.ParNum := 1; // Number of parameter IDs AxisParId.ParIds[1].ParID := 719; // Encoder1: Encoder command AxisParId.ParIds[1].VariableAddress := ADR(mcACPAX_UDINT[1]); // Pointer to predefined variable AxisParId.ParIds[1].DataType := mcACPAX_PARTYPE_UDINT; // Data type of predefined variable AxisParId.CmdSetPar := TRUE; // Execute command END_PROGRAM","title":"Program init"},{"location":"par_id.html#program-cyclic","text":"PROGRAM _CYCLIC // -------------------------------------------------------------------------- // Call axis actions used for this drive Common; ParID; END_PROGRAM","title":"Program cyclic"},{"location":"par_id.html#revision","text":"Version 1 - First release","title":"Revision"},{"location":"revision.html","text":"Version 1.0 First public release","title":"Revision"},{"location":"revision.html#version-10","text":"First public release","title":"Version 1.0"},{"location":"structure.html","text":"All functions are collected in the axis prototype package. The proto type package consists of a common part and the axis function that is demonstrated. The common part contains code and variables that are used in multiple examples. Each axis function is build in way that it can be used independently from other functions. Each axis function comes with its own variable and type definitions. All code is in structure text language and encapsulated in an action. Adding a function to a task To add a function to a specific task follow this procedure. The folder AxisProto contains all files necessary for the specific function. In the first project you can copy the entire AxisProto folder from the sample project into your project. For additional functions just copy the folder for new axis function (Brake) into the existing AxisProto folder. It is recommended to reference the files from the AxisProto type folder to your task instead of making copy. A reference makes it easier to update the files in the future. All axis functions communicate to the outside world through a structure. Most functions need some initial parameters, for example the axis reference MpLink. This code can be executed in the _INIT of the task. The action that drives the function is then called in the _CYLCIC part of the task. Coding guidelines Here are some general coding guidelines used to develop the samples. All axis functions come with its own type and variable declaration and code file. All variables names must be unique because all variables are shared within one task in the end. All function specific variables should therefore start with function name itself. For example the state machine variable for the AxisBrake function is called AxisBrakeState. The only allowed dependency to other modules is to the common module. All data exchange is done through one structure. The structure for the data exchange follows the following guidelines Description Notation A command that triggers an action Cmd{Get|Set}{What} Example: CmdSetMotor mappMotion axis reference MpLink Parameter or configuration values. Parameters can be two directional but it is recommended to see parameters as write only. Par{What} Example: ParMotorSynchronous Status values are read only and are only changed by the prototype code. Sta{What} Example: StaMotorSynchronous Error code ErrID","title":"Structure"},{"location":"structure.html#adding-a-function-to-a-task","text":"To add a function to a specific task follow this procedure. The folder AxisProto contains all files necessary for the specific function. In the first project you can copy the entire AxisProto folder from the sample project into your project. For additional functions just copy the folder for new axis function (Brake) into the existing AxisProto folder. It is recommended to reference the files from the AxisProto type folder to your task instead of making copy. A reference makes it easier to update the files in the future. All axis functions communicate to the outside world through a structure. Most functions need some initial parameters, for example the axis reference MpLink. This code can be executed in the _INIT of the task. The action that drives the function is then called in the _CYLCIC part of the task.","title":"Adding a function to a task"},{"location":"structure.html#coding-guidelines","text":"Here are some general coding guidelines used to develop the samples. All axis functions come with its own type and variable declaration and code file. All variables names must be unique because all variables are shared within one task in the end. All function specific variables should therefore start with function name itself. For example the state machine variable for the AxisBrake function is called AxisBrakeState. The only allowed dependency to other modules is to the common module. All data exchange is done through one structure. The structure for the data exchange follows the following guidelines Description Notation A command that triggers an action Cmd{Get|Set}{What} Example: CmdSetMotor mappMotion axis reference MpLink Parameter or configuration values. Parameters can be two directional but it is recommended to see parameters as write only. Par{What} Example: ParMotorSynchronous Status values are read only and are only changed by the prototype code. Sta{What} Example: StaMotorSynchronous Error code ErrID","title":"Coding guidelines"},{"location":"template.html","text":"The brake sample provides an easy interface to control the brake parameters and function. Also see Automation Studio help (00ef9572-f1d5-43b5-9815-90e510eaeb7f) Repo Link Here is the link to the repository. Command structure The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdClose Close brake programm structure Revision Version 1 - First release","title":"Template"},{"location":"template.html#repo-link","text":"Here is the link to the repository.","title":"Repo Link"},{"location":"template.html#command-structure","text":"The sample uses a variable structure to communicate with the outside world that can also be used to interact with other tasks. The structure looks as follows: Command Function CmdClose Close brake","title":"Command structure"},{"location":"template.html#programm-structure","text":"","title":"programm structure"},{"location":"template.html#revision","text":"Version 1 - First release","title":"Revision"},{"location":"refs/refs_motor_conversion.html","text":"Conversion table for synchronous motors Configuration name Structure name Constant Par ID Note Synchronous\u2192Motor Number of pole pairs .Motor.Default.NumberOfPolePairs MOTOR_POLEPAIRS 47 Synchronous\u2192Motor\u2192Nominal speed .Motor.Default.NominalSpeed MOTOR_SPEED_RATED 50 Synchronous\u2192Motor\u2192Maximum speed .Motor.Default.MaximumSpeed MOTOR_SPEED_MAX 51 Synchronous\u2192Motor\u2192Nominal voltage .Motor.Default.NominalVoltage MOTOR_VOLTAGE_RATED 48 Synchronous\u2192Motor\u2192Nominal current .Motor.Default.NominalCurrent MOTOR_CURR_RATED 57 Synchronous\u2192Motor\u2192Stall current .Motor.Default.StallCurrent MOTOR_CURR_STALL 56 Synchronous\u2192Motor\u2192Peak current .Motor.Default.PeakCurrent MOTOR_CURR_MAX 58 Synchronous\u2192Motor\u2192Nominal torque .Motor.Default.NominalTorque MOTOR_TORQ_RATED 53 Synchronous\u2192Motor\u2192Stall torque .Motor.Default.StallTorque MOTOR_TORQ_STALL 52 Synchronous\u2192Motor\u2192Peak torque .Motor.Default.PeakTorque MOTOR_TORQ_MAX 54 Synchronous\u2192Motor\u2192Voltage constant .Motor.Default.VoltageConstant MOTOR_VOLTAGE_CONST 49 Synchronous\u2192Motor\u2192Torque constant .Motor.Default.TorqueConstant MOTOR_TORQ_CONST 55 Synchronous\u2192Motor\u2192Stator resistance .Motor.Default.StatorResistance MOTOR_STATOR_RESISTANCE 60 Synchronous\u2192Motor\u2192Stator inductance .Motor.Default.StatorInductance MOTOR_STATOR_INDUCTANCE 61 Value is now in mH Synchronous\u2192Motor\u2192Moment of inertia .Motor.Default.MomentOfInertia MOTOR_INERTIA 62 Synchronous\u2192Motor\u2192Nominal ambient temperature .Motor.Default.NominalAmbientTemperature MOTOR_AMB_TEMP_RATED 865 Synchronous\u2192Motor\u2192 .Motor.Default. MOTOR_TEMPSENS_LIM xx","title":"Reference motor table conversion"},{"location":"refs/refs_motor_conversion.html#conversion-table-for-synchronous-motors","text":"Configuration name Structure name Constant Par ID Note Synchronous\u2192Motor Number of pole pairs .Motor.Default.NumberOfPolePairs MOTOR_POLEPAIRS 47 Synchronous\u2192Motor\u2192Nominal speed .Motor.Default.NominalSpeed MOTOR_SPEED_RATED 50 Synchronous\u2192Motor\u2192Maximum speed .Motor.Default.MaximumSpeed MOTOR_SPEED_MAX 51 Synchronous\u2192Motor\u2192Nominal voltage .Motor.Default.NominalVoltage MOTOR_VOLTAGE_RATED 48 Synchronous\u2192Motor\u2192Nominal current .Motor.Default.NominalCurrent MOTOR_CURR_RATED 57 Synchronous\u2192Motor\u2192Stall current .Motor.Default.StallCurrent MOTOR_CURR_STALL 56 Synchronous\u2192Motor\u2192Peak current .Motor.Default.PeakCurrent MOTOR_CURR_MAX 58 Synchronous\u2192Motor\u2192Nominal torque .Motor.Default.NominalTorque MOTOR_TORQ_RATED 53 Synchronous\u2192Motor\u2192Stall torque .Motor.Default.StallTorque MOTOR_TORQ_STALL 52 Synchronous\u2192Motor\u2192Peak torque .Motor.Default.PeakTorque MOTOR_TORQ_MAX 54 Synchronous\u2192Motor\u2192Voltage constant .Motor.Default.VoltageConstant MOTOR_VOLTAGE_CONST 49 Synchronous\u2192Motor\u2192Torque constant .Motor.Default.TorqueConstant MOTOR_TORQ_CONST 55 Synchronous\u2192Motor\u2192Stator resistance .Motor.Default.StatorResistance MOTOR_STATOR_RESISTANCE 60 Synchronous\u2192Motor\u2192Stator inductance .Motor.Default.StatorInductance MOTOR_STATOR_INDUCTANCE 61 Value is now in mH Synchronous\u2192Motor\u2192Moment of inertia .Motor.Default.MomentOfInertia MOTOR_INERTIA 62 Synchronous\u2192Motor\u2192Nominal ambient temperature .Motor.Default.NominalAmbientTemperature MOTOR_AMB_TEMP_RATED 865 Synchronous\u2192Motor\u2192 .Motor.Default. MOTOR_TEMPSENS_LIM xx","title":"Conversion table for synchronous motors"}]}